name: Deploy Firebase Hosting (service-account, safe)

on:
  push:
    branches: ["main"]

env:
  PROJECT_DIR: "."    # modifica se il tuo package.json / firebase.json Ã¨ in una subfolder

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Detect files
        id: detect
        run: |
          proj="${{ env.PROJECT_DIR }}"
          has_pkg="false"
          has_lock="false"
          has_firebase="false"
          if [ -f "${proj}/package.json" ]; then has_pkg="true"; fi
          if [ -f "${proj}/package-lock.json" ]; then has_lock="true"; fi
          if [ -f "${proj}/firebase.json" ]; then has_firebase="true"; fi
          echo "has_package_json=$has_pkg" >> $GITHUB_OUTPUT
          echo "has_package_lock=$has_lock" >> $GITHUB_OUTPUT
          echo "has_firebase_json=$has_firebase" >> $GITHUB_OUTPUT

      - name: Cache npm (only if package.json exists)
        if: steps.detect.outputs.has_package_json == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/package.json', env.PROJECT_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (ci if lock present)
        if: steps.detect.outputs.has_package_json == 'true'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ "${{ steps.detect.outputs.has_package_lock }}" = "true" ]; then
            echo "package-lock.json found. Running npm ci"
            npm ci
          else
            echo "No package-lock.json. Running npm install"
            npm install --no-audit --prefer-offline
          fi

      - name: Build (if present)
        if: steps.detect.outputs.has_package_json == 'true'
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm run build --if-present

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        # deploy from PROJECT_DIR so firebase.json / public dir are respected
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          firebase deploy --only hosting
